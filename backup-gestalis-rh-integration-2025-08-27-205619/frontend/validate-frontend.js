#!/usr/bin/env node
/**
 * Script de validation automatique du frontend GESTALIS
 * V√©rifie tous les composants critiques du frontend
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

class FrontendValidator {
    constructor() {
        this.baseDir = path.resolve(__dirname);
        this.results = {
            timestamp: new Date().toISOString(),
            status: 'pending',
            checks: {},
            errors: [],
            warnings: []
        };
    }

    runAllChecks() {
        console.log('üîç VALIDATION COMPL√àTE DU FRONTEND GESTALIS');
        console.log('=' .repeat(60));

        try {
            this.checkFileStructure();
            this.checkPackageJson();
            this.checkConfigurationFiles();
            this.checkComponents();
            this.checkTests();
            this.checkQualityTools();
            this.checkBuildProcess();

            this.generateReport();
        } catch (error) {
            this.addError(`Erreur critique lors de la validation: ${error.message}`);
            this.generateReport();
        }
    }

    checkFileStructure() {
        console.log('\nÔøΩÔøΩ V√âRIFICATION DE LA STRUCTURE DES FICHIERS');

        const requiredFiles = [
            'package.json',
            'vite.config.js',
            'tailwind.config.js',
            'src/App.jsx',
            'src/components/ui/',
            'src/pages/',
            'src/stores/',
            'src/utils/',
            'src/styles/',
            'src/test/setup.js',
            '.eslintrc.js',
            '.prettierrc',
            '.pre-commit-config.yaml'
        ];

        requiredFiles.forEach(filePath => {
            const fullPath = path.join(this.baseDir, filePath);
            if (fs.existsSync(fullPath)) {
                console.log(`  ‚úÖ ${filePath}`);
                this.addCheck(`file_${filePath.replace(/[\/\.]/g, '_')}`, true, `Fichier ${filePath} pr√©sent`);
            } else {
                console.log(`  ‚ùå ${filePath} - MANQUANT`);
                this.addCheck(`file_${filePath.replace(/[\/\.]/g, '_')}`, false, `Fichier ${filePath} manquant`);
            }
        });
    }

    checkPackageJson() {
        console.log('\nüì¶ V√âRIFICATION DU PACKAGE.JSON');

        try {
            const packagePath = path.join(this.baseDir, 'package.json');
            const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));

            // V√©rifier les scripts
            const requiredScripts = ['dev', 'build', 'test', 'test:ci', 'lint', 'format'];
            requiredScripts.forEach(script => {
                if (packageData.scripts && packageData.scripts[script]) {
                    console.log(`  ‚úÖ Script ${script} pr√©sent`);
                    this.addCheck(`script_${script}`, true, `Script ${script} pr√©sent`);
                } else {
                    console.log(`  ‚ùå Script ${script} - MANQUANT`);
                    this.addCheck(`script_${script}`, false, `Script ${script} manquant`);
                }
            });

            // V√©rifier les d√©pendances
            const requiredDeps = ['react', 'vite', 'tailwindcss', 'zustand'];
            requiredDeps.forEach(dep => {
                if (packageData.dependencies && packageData.dependencies[dep]) {
                    console.log(`  ‚úÖ D√©pendance ${dep} pr√©sente`);
                    this.addCheck(`dep_${dep}`, true, `D√©pendance ${dep} pr√©sente`);
                } else {
                    console.log(`  ‚ùå D√©pendance ${dep} - MANQUANTE`);
                    this.addCheck(`dep_${dep}`, false, `D√©pendance ${dep} manquante`);
                }
            });

            // V√©rifier les d√©pendances de d√©veloppement
            const requiredDevDeps = ['vitest', '@testing-library/react', 'eslint', 'prettier'];
            requiredDevDeps.forEach(dep => {
                if (packageData.devDependencies && packageData.devDependencies[dep]) {
                    console.log(`  ‚úÖ Dev d√©pendance ${dep} pr√©sente`);
                    this.addCheck(`devdep_${dep}`, true, `Dev d√©pendance ${dep} pr√©sente`);
                } else {
                    console.log(`  ‚ùå Dev d√©pendance ${dep} - MANQUANTE`);
                    this.addCheck(`devdep_${dep}`, false, `Dev d√©pendance ${dep} manquante`);
                }
            });

        } catch (error) {
            this.addError(`Erreur lors de la v√©rification du package.json: ${error.message}`);
        }
    }

    checkConfigurationFiles() {
        console.log('\n‚öôÔ∏è V√âRIFICATION DES FICHIERS DE CONFIGURATION');

        // V√©rifier Vite
        const vitePath = path.join(this.baseDir, 'vite.config.js');
        if (fs.existsSync(vitePath)) {
            console.log('  ‚úÖ Configuration Vite pr√©sente');
            this.addCheck('vite_config', true, 'Configuration Vite pr√©sente');
        } else {
            console.log('  ‚ùå Configuration Vite manquante');
            this.addCheck('vite_config', false, 'Configuration Vite manquante');
        }

        // V√©rifier Tailwind
        const tailwindPath = path.join(this.baseDir, 'tailwind.config.js');
        if (fs.existsSync(tailwindPath)) {
            console.log('  ‚úÖ Configuration Tailwind pr√©sente');
            this.addCheck('tailwind_config', true, 'Configuration Tailwind pr√©sente');
        } else {
            console.log('  ‚ùå Configuration Tailwind manquante');
            this.addCheck('tailwind_config', false, 'Configuration Tailwind manquante');
        }

        // V√©rifier ESLint
        const eslintPath = path.join(this.baseDir, '.eslintrc.js');
        if (fs.existsSync(eslintPath)) {
            console.log('  ‚úÖ Configuration ESLint pr√©sente');
            this.addCheck('eslint_config', true, 'Configuration ESLint pr√©sente');
        } else {
            console.log('  ‚ùå Configuration ESLint manquante');
            this.addCheck('eslint_config', false, 'Configuration ESLint manquante');
        }

        // V√©rifier Prettier
        const prettierPath = path.join(this.baseDir, '.prettierrc');
        if (fs.existsSync(prettierPath)) {
            console.log('  ‚úÖ Configuration Prettier pr√©sente');
            this.addCheck('prettier_config', true, 'Configuration Prettier pr√©sente');
        } else {
            console.log('  ‚ùå Configuration Prettier manquante');
            this.addCheck('prettier_config', false, 'Configuration Prettier manquante');
        }
    }

    checkComponents() {
        console.log('\nüß© V√âRIFICATION DES COMPOSANTS');

        const requiredComponents = [
            'src/components/ui/gestalis-button.jsx',
            'src/components/ui/gestalis-card.jsx',
            'src/components/ui/input.jsx',
            'src/components/ui/label.jsx',
            'src/components/ui/textarea.jsx',
            'src/components/layout/Sidebar.jsx',
            'src/pages/Login.jsx',
            'src/pages/Dashboard.jsx'
        ];

        requiredComponents.forEach(componentPath => {
            const fullPath = path.join(this.baseDir, componentPath);
            if (fs.existsSync(fullPath)) {
                console.log(`  ‚úÖ ${componentPath}`);
                this.addCheck(`component_${componentPath.replace(/[\/\.]/g, '_')}`, true, `Composant ${componentPath} pr√©sent`);
            } else {
                console.log(`  ‚ùå ${componentPath} - MANQUANT`);
                this.addCheck(`component_${componentPath.replace(/[\/\.]/g, '_')}`, false, `Composant ${componentPath} manquant`);
            }
        });
    }

    checkTests() {
        console.log('\nüß™ V√âRIFICATION DES TESTS');

        // V√©rifier la configuration Vitest
        const vitestPath = path.join(this.baseDir, 'vitest.config.js');
        if (fs.existsSync(vitestPath)) {
            console.log('  ‚úÖ Configuration Vitest pr√©sente');
            this.addCheck('vitest_config', true, 'Configuration Vitest pr√©sente');
        } else {
            console.log('  ‚ùå Configuration Vitest manquante');
            this.addCheck('vitest_config', false, 'Configuration Vitest manquante');
        }

        // V√©rifier le setup des tests
        const testSetupPath = path.join(this.baseDir, 'src/test/setup.js');
        if (fs.existsSync(testSetupPath)) {
            console.log('  ‚úÖ Setup des tests pr√©sent');
            this.addCheck('test_setup', true, 'Setup des tests pr√©sent');
        } else {
            console.log('  ‚ùå Setup des tests manquant');
            this.addCheck('test_setup', false, 'Setup des tests manquant');
        }
    }

    checkQualityTools() {
        console.log('\n‚ú® V√âRIFICATION DES OUTILS DE QUALIT√â');

        // V√©rifier pre-commit
        const precommitPath = path.join(this.baseDir, '.pre-commit-config.yaml');
        if (fs.existsSync(precommitPath)) {
            console.log('  ‚úÖ Configuration pre-commit pr√©sente');
            this.addCheck('precommit_config', true, 'Configuration pre-commit pr√©sente');
        } else {
            console.log('  ‚ùå Configuration pre-commit manquante');
            this.addCheck('precommit_config', false, 'Configuration pre-commit manquante');
        }
    }

    checkBuildProcess() {
        console.log('\nüèóÔ∏è V√âRIFICATION DU PROCESSUS DE BUILD');

        try {
            // V√©rifier que npm install peut √™tre ex√©cut√©
            console.log('  üîÑ Test de npm install...');
            execSync('npm install --dry-run', { cwd: this.baseDir, stdio: 'pipe' });
            console.log('  ‚úÖ npm install possible');
            this.addCheck('npm_install', true, 'npm install possible');
        } catch (error) {
            console.log('  ‚ùå npm install √©chou√©');
            this.addCheck('npm_install', false, 'npm install √©chou√©');
        }

        try {
            // V√©rifier que le build peut √™tre lanc√©
            console.log('  üîÑ Test de npm run build...');
            execSync('npm run build', { cwd: this.baseDir, stdio: 'pipe' });
            console.log('  ‚úÖ Build r√©ussi');
            this.addCheck('build_success', true, 'Build r√©ussi');
        } catch (error) {
            console.log('  ‚ùå Build √©chou√©');
            this.addCheck('build_success', false, 'Build √©chou√©');
        }
    }

    addCheck(name, success, description) {
        this.results.checks[name] = {
            success,
            description,
            timestamp: new Date().toISOString()
        };
    }

    addError(message) {
        this.results.errors.push({
            message,
            timestamp: new Date().toISOString()
        });
    }

    addWarning(message) {
        this.results.warnings.push({
            message,
            timestamp: new Date().toISOString()
        });
    }

    generateReport() {
        console.log('\n' + '=' .repeat(60));
        console.log('üìä RAPPORT DE VALIDATION FRONTEND GESTALIS');
        console.log('=' .repeat(60));

        // Calculer les statistiques
        const totalChecks = Object.keys(this.results.checks).length;
        const successfulChecks = Object.values(this.results.checks).filter(check => check.success).length;
        const failedChecks = totalChecks - successfulChecks;

        // D√©terminer le statut global
        if (failedChecks === 0 && this.results.errors.length === 0) {
            this.results.status = 'success';
            console.log('\n‚úÖ STATUT GLOBAL: SUCC√àS');
        } else if (failedChecks <= 2) {
            this.results.status = 'warning';
            console.log('\n‚ö†Ô∏è STATUT GLOBAL: AVERTISSEMENT');
        } else {
            this.results.status = 'error';
            console.log('\n‚ùå STATUT GLOBAL: ERREUR');
        }

        console.log(`üìà R√âSULTATS: ${successfulChecks}/${totalChecks} v√©rifications r√©ussies`);

        if (failedChecks > 0) {
            console.log(`\n‚ùå V√âRIFICATIONS √âCHOU√âES (${failedChecks}):`);
            Object.entries(this.results.checks).forEach(([name, check]) => {
                if (!check.success) {
                    console.log(`  ‚Ä¢ ${name}: ${check.description}`);
                }
            });
        }

        if (this.results.errors.length > 0) {
            console.log(`\nüö® ERREURS CRITIQUES (${this.results.errors.length}):`);
            this.results.errors.forEach(error => {
                console.log(`  ‚Ä¢ ${error.message}`);
            });
        }

        if (this.results.warnings.length > 0) {
            console.log(`\n‚ö†Ô∏è AVERTISSEMENTS (${this.results.warnings.length}):`);
            this.results.warnings.forEach(warning => {
                console.log(`  ‚Ä¢ ${warning.message}`);
            });
        }

        // Sauvegarder le rapport
        const reportPath = path.join(this.baseDir, 'frontend_validation_report.json');
        fs.writeFileSync(reportPath, JSON.stringify(this.results, null, 2), 'utf8');
        console.log(`\nÔøΩÔøΩ Rapport sauvegard√©: ${reportPath}`);

        // Recommandations
        if (this.results.status === 'success') {
            console.log('\nÔøΩÔøΩ F√âLICITATIONS ! Le frontend GESTALIS est 100% valid√©.');
            console.log('   Vous pouvez commencer le d√©veloppement des composants m√©tier.');
        } else if (this.results.status === 'warning') {
            console.log('\n‚ö†Ô∏è Le frontend GESTALIS est presque pr√™t.');
            console.log('   Corrigez les quelques probl√®mes identifi√©s avant de continuer.');
        } else {
            console.log('\n‚ùå Le frontend GESTALIS n√©cessite des corrections importantes.');
            console.log('   R√©solvez tous les probl√®mes avant de continuer.');
        }
    }
}

// Ex√©cuter la validation
const validator = new FrontendValidator();
validator.runAllChecks();
