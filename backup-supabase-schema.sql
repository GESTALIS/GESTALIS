-- =====================================================
-- SAUVEGARDE COMPLÈTE SCHEMA SUPABASE GESTALIS
-- Date: 2025-01-09
-- Version: SmartPicker Implementation
-- =====================================================

-- Table: fournisseurs
CREATE TABLE IF NOT EXISTS public.fournisseurs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code_fournisseur text NOT NULL UNIQUE,
    raison_sociale text NOT NULL,
    siret text,
    tva_intracommunautaire text,
    code_ape_naf text,
    forme_juridique text,
    capital_social text,
    adresse_siege text,
    adresse_livraison text,
    plafond_credit numeric,
    devise text DEFAULT 'EUR',
    est_sous_traitant boolean DEFAULT false,
    compte_comptable text,
    pas_de_tva_guyane boolean DEFAULT false,
    mode_reglement text DEFAULT 'VIR',
    echeance_type text DEFAULT '30J',
    respect_echeance boolean DEFAULT true,
    jours_decalage integer DEFAULT 30,
    fin_de_mois boolean DEFAULT false,
    jour_paiement integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Table: employes
CREATE TABLE IF NOT EXISTS public.employes (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    matricule text NOT NULL UNIQUE,
    nom text NOT NULL,
    prenom text NOT NULL,
    date_naissance date,
    poste text,
    email text,
    telephone text,
    adresse text,
    date_embauche date,
    statut text DEFAULT 'actif',
    salaire numeric,
    commentaires text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Table: users
CREATE TABLE IF NOT EXISTS public.users (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    prenom text NOT NULL,
    nom text NOT NULL,
    email text NOT NULL UNIQUE,
    telephone text,
    role text DEFAULT 'UTILISATEUR',
    departement text,
    poste text,
    date_embauche date,
    statut text DEFAULT 'ACTIF',
    notes text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Table: chantiers
CREATE TABLE IF NOT EXISTS public.chantiers (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nom text NOT NULL,
    code text NOT NULL UNIQUE,
    numero_externe text,
    description text,
    type text DEFAULT 'Construction',
    client_nom text,
    adresse text,
    ville text,
    code_postal text,
    date_debut date,
    date_fin date,
    duree_estimee text,
    statut text DEFAULT 'en_preparation',
    montant numeric DEFAULT 0,
    devise text DEFAULT 'EUR',
    acompte numeric DEFAULT 0,
    chef_chantier text,
    equipe integer DEFAULT 0,
    sous_traitants jsonb DEFAULT '[]',
    documents jsonb DEFAULT '[]',
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Table: produits
CREATE TABLE IF NOT EXISTS public.produits (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    code text NOT NULL UNIQUE,
    nom text NOT NULL,
    description text,
    categorie text,
    unite text DEFAULT 'U',
    commentaires text,
    fournisseurs jsonb DEFAULT '[]',
    statut text DEFAULT 'ACTIF',
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Table: bons_commande
CREATE TABLE IF NOT EXISTS public.bons_commande (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    numero_commande text NOT NULL UNIQUE,
    date_commande date NOT NULL,
    date_livraison_souhaitee date,
    demandeur_id bigint REFERENCES public.employes(id),
    createur_id bigint REFERENCES public.users(id),
    fournisseur_id bigint REFERENCES public.fournisseurs(id),
    chantier_id bigint REFERENCES public.chantiers(id),
    observations text,
    statut text DEFAULT 'BROUILLON',
    articles jsonb DEFAULT '[]',
    total_general numeric DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- =====================================================
-- INDEXES POUR PERFORMANCE
-- =====================================================

-- Indexes pour fournisseurs
CREATE INDEX IF NOT EXISTS idx_fournisseurs_code ON public.fournisseurs(code_fournisseur);
CREATE INDEX IF NOT EXISTS idx_fournisseurs_raison_sociale ON public.fournisseurs(raison_sociale);
CREATE INDEX IF NOT EXISTS idx_fournisseurs_siret ON public.fournisseurs(siret);

-- Indexes pour employes
CREATE INDEX IF NOT EXISTS idx_employes_matricule ON public.employes(matricule);
CREATE INDEX IF NOT EXISTS idx_employes_nom ON public.employes(nom);
CREATE INDEX IF NOT EXISTS idx_employes_prenom ON public.employes(prenom);
CREATE INDEX IF NOT EXISTS idx_employes_poste ON public.employes(poste);

-- Indexes pour users
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);
CREATE INDEX IF NOT EXISTS idx_users_nom ON public.users(nom);
CREATE INDEX IF NOT EXISTS idx_users_prenom ON public.users(prenom);
CREATE INDEX IF NOT EXISTS idx_users_role ON public.users(role);

-- Indexes pour chantiers
CREATE INDEX IF NOT EXISTS idx_chantiers_code ON public.chantiers(code);
CREATE INDEX IF NOT EXISTS idx_chantiers_nom ON public.chantiers(nom);
CREATE INDEX IF NOT EXISTS idx_chantiers_client ON public.chantiers(client_nom);
CREATE INDEX IF NOT EXISTS idx_chantiers_statut ON public.chantiers(statut);

-- Indexes pour produits
CREATE INDEX IF NOT EXISTS idx_produits_code ON public.produits(code);
CREATE INDEX IF NOT EXISTS idx_produits_nom ON public.produits(nom);
CREATE INDEX IF NOT EXISTS idx_produits_categorie ON public.produits(categorie);

-- Indexes pour bons_commande
CREATE INDEX IF NOT EXISTS idx_bons_commande_numero ON public.bons_commande(numero_commande);
CREATE INDEX IF NOT EXISTS idx_bons_commande_date ON public.bons_commande(date_commande);
CREATE INDEX IF NOT EXISTS idx_bons_commande_fournisseur ON public.bons_commande(fournisseur_id);
CREATE INDEX IF NOT EXISTS idx_bons_commande_chantier ON public.bons_commande(chantier_id);

-- =====================================================
-- POLITIQUES RLS (Row Level Security)
-- =====================================================

-- Activer RLS sur toutes les tables
ALTER TABLE public.fournisseurs ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.employes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.chantiers ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.produits ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bons_commande ENABLE ROW LEVEL SECURITY;

-- Politiques pour fournisseurs
CREATE POLICY "Enable read access for all users" ON public.fournisseurs FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.fournisseurs FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.fournisseurs FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.fournisseurs FOR DELETE USING (true);

-- Politiques pour employes
CREATE POLICY "Enable read access for all users" ON public.employes FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.employes FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.employes FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.employes FOR DELETE USING (true);

-- Politiques pour users
CREATE POLICY "Enable read access for all users" ON public.users FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.users FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.users FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.users FOR DELETE USING (true);

-- Politiques pour chantiers
CREATE POLICY "Enable read access for all users" ON public.chantiers FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.chantiers FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.chantiers FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.chantiers FOR DELETE USING (true);

-- Politiques pour produits
CREATE POLICY "Enable read access for all users" ON public.produits FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.produits FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.produits FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.produits FOR DELETE USING (true);

-- Politiques pour bons_commande
CREATE POLICY "Enable read access for all users" ON public.bons_commande FOR SELECT USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.bons_commande FOR INSERT WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.bons_commande FOR UPDATE USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.bons_commande FOR DELETE USING (true);

-- =====================================================
-- FONCTIONS UTILITAIRES
-- =====================================================

-- Fonction pour mettre à jour updated_at automatiquement
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers pour updated_at
CREATE TRIGGER update_fournisseurs_updated_at BEFORE UPDATE ON public.fournisseurs FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_employes_updated_at BEFORE UPDATE ON public.employes FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON public.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_chantiers_updated_at BEFORE UPDATE ON public.chantiers FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_produits_updated_at BEFORE UPDATE ON public.produits FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
CREATE TRIGGER update_bons_commande_updated_at BEFORE UPDATE ON public.bons_commande FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- =====================================================
-- DONNÉES DE TEST (OPTIONNEL)
-- =====================================================

-- Insérer quelques fournisseurs de test
INSERT INTO public.fournisseurs (code_fournisseur, raison_sociale, siret, adresse_siege) VALUES
('FPRO97-0001', 'FOURNISSEUR TEST 1', '12345678901234', '123 Rue de la Paix, 97300 Cayenne'),
('FPRO97-0002', 'FOURNISSEUR TEST 2', '23456789012345', '456 Avenue des Fleurs, 97300 Cayenne'),
('FPRO97-0003', 'FOURNISSEUR TEST 3', '34567890123456', '789 Boulevard de la République, 97300 Cayenne')
ON CONFLICT (code_fournisseur) DO NOTHING;

-- Insérer quelques employés de test
INSERT INTO public.employes (matricule, nom, prenom, poste, email, date_embauche) VALUES
('EMP001', 'Dupont', 'Jean', 'Responsable RH', 'jean.dupont@gestalis.com', '2020-01-15'),
('EMP002', 'Martin', 'Marie', 'Comptable', 'marie.martin@gestalis.com', '2021-03-01'),
('EMP003', 'Bernard', 'Pierre', 'Chef de Chantier', 'pierre.bernard@gestalis.com', '2019-06-15')
ON CONFLICT (matricule) DO NOTHING;

-- Insérer quelques utilisateurs de test
INSERT INTO public.users (prenom, nom, email, role, poste) VALUES
('Admin', 'System', 'admin@gestalis.com', 'ADMIN', 'Administrateur'),
('User', 'Test', 'user@gestalis.com', 'UTILISATEUR', 'Utilisateur Test')
ON CONFLICT (email) DO NOTHING;

-- =====================================================
-- FIN DE LA SAUVEGARDE
-- =====================================================
