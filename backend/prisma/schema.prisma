datasource db { 
  provider = "postgresql" 
  url = env("DATABASE_URL") 
}

generator client { 
  provider = "prisma-client-js" 
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  passwordHash  String
  role          String         // admin|manager|user|viewer
  active        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  auditLogs     AuditLog[]
}

model RefreshToken {
  id                String    @id @default(cuid())
  userId            String
  tokenHash         String
  deviceFingerprint String?
  expiresAt         DateTime
  revokedAt         DateTime?
  user              User      @relation(fields: [userId], references: [id])
  createdAt         DateTime  @default(now())
  
  @@index([userId])
}

model Chantier {
  id                    String   @id @default(cuid())
  nom                   String
  description           String?
  statut                String   @default("en_preparation")
  budgetInitial         Decimal  @db.Decimal(18,2)
  budgetActuel          Decimal  @db.Decimal(18,2)
  dateDebut             DateTime?
  dateFinPrevue         DateTime?
  dateFinReelle         DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  facturesClients       FactureClient[]
  facturesFournisseurs  FactureFournisseur[]
  marches               MarcheClient[]
  sousTraitanceContrats SousTraitanceContrat[]
}

model Tiers {
  id                    String   @id @default(cuid())
  nom                   String
  type                  String   // CLIENT|FOURNISSEUR|SOUSTRAITANT
  siret                 String?
  adresse               String?
  codePostal            String?
  ville                 String?
  telephone             String?
  email                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  facturesClients       FactureClient[]
  facturesFournisseurs  FactureFournisseur[]
  marches               MarcheClient[]
  sousTraitanceContrats SousTraitanceContrat[]
  
  @@index([nom])
}

// === S1 - SITUATIONS & MARCHÉS ===

model MarcheClient {
  id         String   @id @default(cuid())
  chantierId String
  clientId   String
  reference  String   // N° marché/commande
  devise     String   @default("EUR")
  tvaMode    String   @default("STANDARD") // STANDARD|EXONERE
  retenueGarantiePct Decimal @db.Decimal(5,2) @default(5.00)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  chantier   Chantier @relation(fields: [chantierId], references: [id])
  client     Tiers    @relation(fields: [clientId], references: [id])
  bpuPostes  BpuPoste[]
  situations Situation[]
  attachements Attachement[]
  
  @@unique([chantierId, reference])
  @@index([chantierId])
}

model BpuPoste {
  id         String   @id @default(cuid())
  marcheId   String
  code       String
  libelle    String
  unite      String
  prixUnitaire Decimal @db.Decimal(18,4)
  qtePrevue  Decimal  @db.Decimal(18,4)
  
  // Relations
  marche     MarcheClient @relation(fields: [marcheId], references: [id])
  situationLignes SituationLigne[]
  attachements Attachement[]
  
  @@unique([marcheId, code])
  @@index([marcheId])
}

model Situation {
  id          String   @id @default(cuid())
  marcheId    String
  numero      Int
  periodeDebut DateTime
  periodeFin   DateTime
  penalites    Decimal @db.Decimal(18,2) @default(0)
  retenuePct   Decimal @db.Decimal(5,2) @default(0)
  statut       String   @default("brouillon") // brouillon|validee|facturee
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  marche      MarcheClient @relation(fields: [marcheId], references: [id])
  lignes      SituationLigne[]
  
  @@unique([marcheId, numero])
  @@index([marcheId, statut])
}

model SituationLigne {
  id             String   @id @default(cuid())
  situationId    String
  posteId        String
  qteMois        Decimal  @db.Decimal(18,4)
  qteCumulAvant  Decimal  @db.Decimal(18,4)
  qteCumulApres  Decimal  @db.Decimal(18,4)
  prixUnitaire   Decimal  @db.Decimal(18,4)
  montantMois    Decimal  @db.Decimal(18,2)
  
  // Relations
  situation      Situation @relation(fields: [situationId], references: [id])
  poste         BpuPoste  @relation(fields: [posteId], references: [id])
  
  @@index([situationId])
}

model Attachement {
  id           String   @id @default(cuid())
  marcheId     String
  posteId      String
  date         DateTime
  qte          Decimal  @db.Decimal(18,4)
  commentaire  String?
  pieceUrl     String?
  createdBy    String
  
  // Relations
  marche       MarcheClient @relation(fields: [marcheId], references: [id])
  poste        BpuPoste     @relation(fields: [posteId], references: [id])
  
  @@index([marcheId, posteId, date])
}

// === S3 - SOUS-TRAITANCE & DAILY ===

model SousTraitanceContrat {
  id         String   @id @default(cuid())
  chantierId String
  sousTraitantId String
  reference  String
  montantTtc Decimal @db.Decimal(18,2)
  retenueGarantiePct Decimal @db.Decimal(5,2) @default(5.00)
  cautionRemplacement Boolean @default(false)
  statut     String @default("actif") // actif|clos|suspendu
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relations
  chantier       Chantier @relation(fields: [chantierId], references: [id])
  sousTraitant   Tiers    @relation(fields: [sousTraitantId], references: [id])
  situations     SousTraitanceSituation[]
  
  @@unique([chantierId, reference])
  @@index([chantierId, statut])
}

model SousTraitanceSituation {
  id         String   @id @default(cuid())
  contratId  String
  numero     Int
  periodeDebut DateTime
  periodeFin   DateTime
  montantMois Decimal @db.Decimal(18,2)
  retenueMois Decimal @db.Decimal(18,2) @default(0)
  penalites   Decimal @db.Decimal(18,2) @default(0)
  statut      String @default("brouillon") // brouillon|validee|facturee
  
  // Relations
  contrat    SousTraitanceContrat @relation(fields: [contratId], references: [id])
  
  @@unique([contratId, numero])
  @@index([contratId, statut])
}

model CessionCreance {
  id            String   @id @default(cuid())
  factureClientId String
  cessionnaire   String  // banque / bénéficiaire
  reference      String
  dateCession    DateTime
  montantCede    Decimal  @db.Decimal(18,2)
  statut         String   @default("active") // active|levee|annulee
  pieceUrl       String?
  createdAt      DateTime @default(now())
  
  // Relations
  factureClient FactureClient @relation(fields: [factureClientId], references: [id])
  
  @@unique([factureClientId])
  @@index([statut])
}

// === COMPTABILITÉ - MULTI-SOCIÉTÉS & EXPORTS ===

model Societe {
  id        String   @id @default(cuid())
  raisonSociale String
  siret     String?
  tvaIntra  String?
  planComptable Json    // mapping comptes (706/60/401/411/445*…)
  journals  Json        // codes journaux (VEN/ACH/BQ)
  tvaMode   String @default("STANDARD") // STANDARD|EXONERE
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  exports   ExportComptable[]
}

model ExportComptable {
  id         String   @id @default(cuid())
  societeId  String
  type       String   // FEC|OD|JOURNAL_VENTES|JOURNAL_ACHATS|REGLEMENTS
  exercice   Int
  periodeDebut DateTime
  periodeFin   DateTime
  statut     String   @default("en_cours") // en_cours|pret|echec
  fichierUrl String?
  checksum   String?
  createdAt  DateTime @default(now())
  
  // Relations
  societe    Societe @relation(fields: [societeId], references: [id])
  
  @@index([societeId, type, statut])
}

// === CŒUR EXISTANT ===

model FactureClient {
  id            String   @id @default(cuid())
  numero        String   @unique
  montantHT     Decimal  @db.Decimal(18,2)
  montantTVA    Decimal  @db.Decimal(18,2)
  montantTotal  Decimal  @db.Decimal(18,2)
  dateFacture   DateTime
  dateEcheance  DateTime?
  statut        String   @default("emise")
  resteALetrer  Decimal  @db.Decimal(18,2)
  chantierId    String
  tiersId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  chantier      Chantier @relation(fields: [chantierId], references: [id])
  tiers         Tiers    @relation(fields: [tiersId], references: [id])
  reglements    Reglement[]
  lettrages     Lettrage[]
  cession       CessionCreance?
  
  @@index([chantierId, statut])
  @@index([tiersId])
}

model FactureFournisseur {
  id            String   @id @default(cuid())
  numero        String   @unique
  montantHT     Decimal  @db.Decimal(18,2)
  montantTVA    Decimal  @db.Decimal(18,2)
  montantTotal  Decimal  @db.Decimal(18,2)
  dateFacture   DateTime
  dateEcheance  DateTime?
  statut        String   @default("emise")
  resteALetrer  Decimal  @db.Decimal(18,2)
  chantierId    String
  tiersId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  chantier      Chantier @relation(fields: [chantierId], references: [id])
  tiers         Tiers    @relation(fields: [tiersId], references: [id])
  reglements    Reglement[]
  lettrages     Lettrage[]
  
  @@index([chantierId, statut])
  @@index([tiersId])
}

model Reglement {
  id                    String   @id @default(cuid())
  montant               Decimal  @db.Decimal(18,2)
  dateReglement         DateTime
  modeReglement         String
  reference             String?
  referenceBancaire     String?  // pour Dailly
  factureClientId       String?
  factureFournisseurId  String?
  sourceImportId         String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  // Relations
  factureClient         FactureClient?      @relation(fields: [factureClientId], references: [id])
  factureFournisseur    FactureFournisseur? @relation(fields: [factureFournisseurId], references: [id])
  importBanque          ImportBanque?       @relation(fields: [sourceImportId], references: [id])
  lettrages             Lettrage[]
  
  @@index([factureClientId])
  @@index([factureFournisseurId])
  @@index([sourceImportId])
}

model ImportBanque {
  id            String   @id @default(cuid())
  nomFichier    String
  dateImport    DateTime @default(now())
  statut        String   @default("preview")
  checksum      String
  lignes        ImportBanqueLigne[]
  reglements    Reglement[]
  
  @@index([statut])
  @@index([checksum])
}

model ImportBanqueLigne {
  id            String   @id @default(cuid())
  importBanqueId String
  dateOperation DateTime
  montant       Decimal  @db.Decimal(18,2)
  libelle       String
  reference     String?
  
  // Relations
  importBanque  ImportBanque @relation(fields: [importBanqueId], references: [id])
  
  @@index([importBanqueId])
  @@index([dateOperation])
}

model Lettrage {
  id                    String   @id @default(cuid())
  montant               Decimal  @db.Decimal(18,2)
  factureClientId       String?
  factureFournisseurId  String?
  reglementId            String
  createdAt             DateTime @default(now())
  
  // Relations
  factureClient         FactureClient?      @relation(fields: [factureClientId], references: [id])
  lettrageFactureFournisseur FactureFournisseur? @relation(fields: [factureFournisseurId], references: [id])
  reglement             Reglement           @relation(fields: [reglementId], references: [id])
  
  @@index([reglementId])
  @@index([factureClientId])
  @@index([factureFournisseurId])
}

model AuditLog {
  id          String   @id @default(cuid())
  userId      String
  action      String
  resource    String
  resourceId  String?
  details     Json?
  createdAt   DateTime @default(now())
  
  // Relations
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([resource, resourceId])
  @@index([createdAt])
}
