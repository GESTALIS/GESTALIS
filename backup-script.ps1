# =====================================================
# SCRIPT DE SAUVEGARDE COMPL√àTE GESTALIS
# Date: 2025-01-09
# Version: SmartPicker Implementation
# =====================================================

Write-Host "üöÄ D√âMARRAGE DE LA SAUVEGARDE COMPL√àTE GESTALIS" -ForegroundColor Green
Write-Host "=================================================" -ForegroundColor Green

# Variables
$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$backupDir = "C:\Users\PRO97\Desktop\Gestalis\backups"
$projectDir = "C:\Users\PRO97\Desktop\Gestalis"
$backupName = "GESTALIS_SmartPicker_$timestamp"

# Cr√©er le dossier de sauvegarde
if (!(Test-Path $backupDir)) {
    New-Item -ItemType Directory -Path $backupDir -Force
    Write-Host "‚úÖ Dossier de sauvegarde cr√©√©: $backupDir" -ForegroundColor Green
}

$currentBackupDir = "$backupDir\$backupName"
New-Item -ItemType Directory -Path $currentBackupDir -Force
Write-Host "‚úÖ Dossier de sauvegarde actuelle cr√©√©: $currentBackupDir" -ForegroundColor Green

# 1. SAUVEGARDE DU CODE SOURCE
Write-Host "`nüìÅ SAUVEGARDE DU CODE SOURCE..." -ForegroundColor Yellow
try {
    # Copier tout le projet
    Copy-Item -Path "$projectDir\*" -Destination $currentBackupDir -Recurse -Exclude @("node_modules", ".git", "backups", "*.log")
    Write-Host "‚úÖ Code source sauvegard√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la sauvegarde du code source: $($_.Exception.Message)" -ForegroundColor Red
}

# 2. SAUVEGARDE GIT
Write-Host "`nüîß SAUVEGARDE GIT..." -ForegroundColor Yellow
try {
    Set-Location $projectDir
    $gitStatus = git status --porcelain
    if ($gitStatus) {
        Write-Host "‚ö†Ô∏è  Modifications non commit√©es d√©tect√©es" -ForegroundColor Yellow
        git add .
        git commit -m "üîÑ Sauvegarde automatique - $timestamp"
        Write-Host "‚úÖ Modifications commit√©es" -ForegroundColor Green
    }
    
    git push origin main
    Write-Host "‚úÖ Code pouss√© vers GitHub" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur Git: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. SAUVEGARDE DE LA BASE DE DONN√âES
Write-Host "`nüóÑÔ∏è  SAUVEGARDE DE LA BASE DE DONN√âES..." -ForegroundColor Yellow
try {
    # Copier le sch√©ma SQL
    Copy-Item -Path "$projectDir\backup-supabase-schema.sql" -Destination "$currentBackupDir\database-schema.sql" -Force
    Write-Host "‚úÖ Sch√©ma de base de donn√©es sauvegard√©" -ForegroundColor Green
    
    # Note: Pour une vraie sauvegarde Supabase, utiliser l'API ou l'interface web
    Write-Host "‚ÑπÔ∏è  Pour une sauvegarde compl√®te Supabase, utiliser l'interface web ou l'API" -ForegroundColor Cyan
} catch {
    Write-Host "‚ùå Erreur lors de la sauvegarde de la base de donn√©es: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. SAUVEGARDE DE LA DOCUMENTATION
Write-Host "`nüìö SAUVEGARDE DE LA DOCUMENTATION..." -ForegroundColor Yellow
try {
    Copy-Item -Path "$projectDir\DOCUMENTATION-SMART-PICKER.md" -Destination "$currentBackupDir\README.md" -Force
    Write-Host "‚úÖ Documentation sauvegard√©e" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la sauvegarde de la documentation: $($_.Exception.Message)" -ForegroundColor Red
}

# 5. CR√âATION D'UN ARCHIVE COMPRESS√â
Write-Host "`nüì¶ CR√âATION DE L'ARCHIVE COMPRESS√âE..." -ForegroundColor Yellow
try {
    $archivePath = "$backupDir\${backupName}.zip"
    Compress-Archive -Path $currentBackupDir -DestinationPath $archivePath -Force
    Write-Host "‚úÖ Archive cr√©√©e: $archivePath" -ForegroundColor Green
    
    # Supprimer le dossier temporaire
    Remove-Item -Path $currentBackupDir -Recurse -Force
    Write-Host "‚úÖ Dossier temporaire supprim√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors de la cr√©ation de l'archive: $($_.Exception.Message)" -ForegroundColor Red
}

# 6. SAUVEGARDE SUR LE CLOUD (OPTIONNEL)
Write-Host "`n‚òÅÔ∏è  SAUVEGARDE SUR LE CLOUD..." -ForegroundColor Yellow
Write-Host "‚ÑπÔ∏è  Pour une sauvegarde cloud automatique, configurer:" -ForegroundColor Cyan
Write-Host "   - Google Drive API" -ForegroundColor Cyan
Write-Host "   - Dropbox API" -ForegroundColor Cyan
Write-Host "   - OneDrive API" -ForegroundColor Cyan
Write-Host "   - AWS S3" -ForegroundColor Cyan

# 7. RAPPORT DE SAUVEGARDE
Write-Host "`nüìä RAPPORT DE SAUVEGARDE" -ForegroundColor Yellow
Write-Host "========================" -ForegroundColor Yellow

$archiveSize = if (Test-Path $archivePath) { 
    [math]::Round((Get-Item $archivePath).Length / 1MB, 2) 
} else { 
    "N/A" 
}

Write-Host "üìÖ Date: $timestamp" -ForegroundColor White
Write-Host "üìÅ Dossier: $backupDir" -ForegroundColor White
Write-Host "üì¶ Archive: ${backupName}.zip" -ForegroundColor White
Write-Host "üíæ Taille: $archiveSize MB" -ForegroundColor White
Write-Host "üîó GitHub: https://github.com/GESTALIS/GESTALIS" -ForegroundColor White

# 8. NETTOYAGE DES ANCIENNES SAUVEGARDES (garder les 5 derni√®res)
Write-Host "`nüßπ NETTOYAGE DES ANCIENNES SAUVEGARDES..." -ForegroundColor Yellow
try {
    $oldBackups = Get-ChildItem -Path $backupDir -Filter "GESTALIS_SmartPicker_*.zip" | 
                  Sort-Object LastWriteTime -Descending | 
                  Select-Object -Skip 5
    
    foreach ($oldBackup in $oldBackups) {
        Remove-Item -Path $oldBackup.FullName -Force
        Write-Host "üóëÔ∏è  Ancienne sauvegarde supprim√©e: $($oldBackup.Name)" -ForegroundColor Yellow
    }
    Write-Host "‚úÖ Nettoyage termin√©" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Erreur lors du nettoyage: $($_.Exception.Message)" -ForegroundColor Red
}

# 9. V√âRIFICATION DE L'INT√âGRIT√â
Write-Host "`nüîç V√âRIFICATION DE L'INT√âGRIT√â..." -ForegroundColor Yellow
try {
    if (Test-Path $archivePath) {
        $archive = Get-Item $archivePath
        if ($archive.Length -gt 0) {
            Write-Host "‚úÖ Archive valide et non vide" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Archive vide ou corrompue" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Archive non trouv√©e" -ForegroundColor Red
    }
} catch {
    Write-Host "‚ùå Erreur lors de la v√©rification: $($_.Exception.Message)" -ForegroundColor Red
}

# 10. FINALISATION
Write-Host "`nüéâ SAUVEGARDE TERMIN√âE !" -ForegroundColor Green
Write-Host "========================" -ForegroundColor Green
Write-Host "‚úÖ Code source sauvegard√©" -ForegroundColor Green
Write-Host "‚úÖ Base de donn√©es sauvegard√©e" -ForegroundColor Green
Write-Host "‚úÖ Documentation sauvegard√©e" -ForegroundColor Green
Write-Host "‚úÖ Archive cr√©√©e" -ForegroundColor Green
Write-Host "‚úÖ Code pouss√© vers GitHub" -ForegroundColor Green
Write-Host "`nüìÅ Emplacement de la sauvegarde: $archivePath" -ForegroundColor Cyan
Write-Host "üîó Repository GitHub: https://github.com/GESTALIS/GESTALIS" -ForegroundColor Cyan
Write-Host "`nüí° Pour restaurer: extraire l'archive et ex√©cuter 'npm install'" -ForegroundColor Yellow

# Retourner au r√©pertoire original
Set-Location $projectDir

Write-Host "`nüöÄ Script termin√© avec succ√®s !" -ForegroundColor Green
